apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: grafana/grafana:8.4.4
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 250m
              memory: 750Mi
          volumeMounts:
            - name: grafana-pv
              mountPath: /var/lib/grafana
            # - name: grafana-config-volume
            #   mountPath: /etc/grafana/
      volumes:
        - name: grafana-pv
          persistentVolumeClaim:
            claimName: grafana-pvc
        # - name: grafana-config-volume
        #   configMap:
        #     name: grafana-config
        #     items:
        #     - key: datasource.yml
        #       path: provisioning/datasources/datasource.yml
        #     - key: dashboards.yml
        #       path: provisioning/dashboards/dashboards.yml
        #     - key: dashboard.json
        #       path: dashboard.json